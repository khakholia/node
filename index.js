const express = require("express");
var cors = require("cors");
const fs = require("fs");
var mysql = require('mysql2');

// connecting to database
var connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'root1234',
  database: 'accounts_module'
});
connection.connect((err) => {
  if (err) { console.log("DB Connection Failed."); return }

  // Initializing Exprress Server
  const app = express();
  app.use(cors());

  //Routes/Apis
  app.use("/readFile", async (req, res) => {
    res.end(await fs.readFileSync("./data.json"))
  });
  app.use("/writeFile", async (req, res) => {
    var id = req.query.id
    var name = req.query.name
    if (id && name) {
      var data = JSON.parse(await fs.readFileSync("./data.json"))
      data.data.push({ id: id, name: name })
      await fs.writeFileSync("./data.json", JSON.stringify(data))
      res.json({ status: "File Updated." })
    } else {
      res.end("Error Occured")
    }
  });

  // display
  app.get("/invoices", (req, res) => {
    connection.query("SELECT * FROM invoice;", (err, results, fields) => {
      if (err) return res.json({ error: err.message })
      res.json(results)
    })
  })

  // search
  app.get("/invoice/:id", (req, res) => {
    if (!req.params.id) {
      res.json({ error: "Id required" })
      return
    }
    var id = req.params.id
    connection.query("SELECT * FROM invoice WHERE id = " + id, (err, results, fields) => {
      if (err) return res.json({ error: err.message })
      res.json(results)
    })
  })

  // add
  app.get("/newinvoice", (req, res) => {
    if (!req.query.amount) {
      res.json({ error: "Amount required" })
      return
    }
    if (!req.query.description) {
      res.json({ error: "Description required" })
      return
    }
    if (!req.query.date) {
      res.json({ error: "Date required" })
      return
    }
    if (!req.query.type) {
      res.json({ error: "Type required" })
      return
    }
    if (!req.query.status) {
      res.json({ error: "Status required" })
      return
    }
    if (!req.query.generated_by) {
      res.json({ error: "Generated By required" })
      return
    }
    connection.query(`INSERT INTO invoice(amount,description,date,type,status,generated_by) ` +
      `VALUES(${req.query.amount},'${req.query.description}','${req.query.date}','${req.query.type}','${req.query.status}','${req.query.generated_by}')`,
      (err, results, fields) => {
        if (err) return res.json({ error: err.message })
        res.json(results)
      })
  })

  // update
  app.get("/updateInvoice", (req, res) => {
    if (!req.query.id) {
      res.json({ error: "Id required" })
      return
    }
    if (!req.query.amount) {
      res.json({ error: "Amount required" })
      return
    }
    var id = req.query.id
    var amount = req.query.amount
    connection.query(`UPDATE invoice SET amount = '${amount}' WHERE id = ${id}`, (err, results, fields) => {
      if (err) return res.json({ error: err.message })
      res.json(results)
    })
  })

  // delete
  app.get("/deleteInvoice", (req, res) => {
    if (!req.query.id) {
      res.json({ error: "Id required" })
      return
    }

    var id = req.query.id
    connection.query(`DELETE FROM invoice WHERE id = ${id}`, (err, results, fields) => {
      if (err) return res.json({ error: err.message })
      res.json(results)
    })
  })

  //Port
  const port = 8000;

  //Starting a server
  app.listen(port, () => {
    console.log(`*** SERVER STARTED AT PORT ${port} ***`);
  });

})